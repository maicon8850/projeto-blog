package br.com.montreal.projeto_blog.security;

import java.security.Key;
import java.util.Date;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;

import org.springframework.stereotype.Component;

import br.com.montreal.projeto_blog.model.Usuario;

/**
 * ‚úÖ Requisito 5 - Utilit√°rio de manipula√ß√£o de JWT (cria√ß√£o, valida√ß√£o e leitura do token)
 */
@Component
public class JwtUtils {

    // üîê Chave secreta para assinar o token JWT (deve ter pelo menos 32 caracteres)
    private static final String SECRET = "blogpessoalblogpessoalblogpessoal123";

    // ‚è∞ Tempo de expira√ß√£o do token (1 dia = 86400000 ms)
    private static final long EXPIRATION_TIME = 86400000;

    // üîë Gera uma chave segura a partir da constante SECRET
    private static final Key KEY = Keys.hmacShaKeyFor(SECRET.getBytes());

    /**
     * ‚úÖ Gera um token JWT com os dados do usu√°rio (id, nome e e-mail)
     * Esse token √© devolvido ao cliente ap√≥s o login com sucesso.
     */
    public String generateToken(Usuario usuario) {
        return Jwts.builder()
                .setSubject(usuario.getUsuario())                        // Define o assunto (e-mail do usu√°rio)
                .claim("id", usuario.getId())                            // Adiciona o ID como uma informa√ß√£o extra (claim)
                .claim("nome", usuario.getNome())                        // Adiciona o nome como claim
                .setIssuedAt(new Date())                                 // Define a data de emiss√£o
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME)) // Define a expira√ß√£o
                .signWith(KEY)                                           // Assina com a chave segura
                .compact();                                              // Compacta o token para string final
    }

    /**
     * ‚úÖ Extrai o nome do usu√°rio (e-mail) de dentro do token JWT.
     * √â chamado durante a autentica√ß√£o para identificar o usu√°rio.
     */
    public String getUsernameFromToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(KEY)
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject(); // Retorna o "subject" definido na cria√ß√£o do token
    }

    /**
     * ‚úÖ Valida se o token √© aut√™ntico, n√£o expirou e est√° bem formado.
     * Se qualquer erro ocorrer, o token ser√° considerado inv√°lido.
     */
    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder()
                    .setSigningKey(KEY)
                    .build()
                    .parseClaimsJws(token);
            return true;
        } catch (JwtException | IllegalArgumentException e) {
            return false; // ‚ùå Token inv√°lido, expirado ou mal formado
        }
    }
}